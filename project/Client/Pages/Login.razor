@page "/login"
@* @using Microsoft.AspNetCore.WebUtilities *@
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService
@using Microsoft.AspNetCore.WebUtilities

<style>
    .main{
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 20vh;
        margin: 0;
    }
</style>

<PageTitle>Login</PageTitle>

<h3>Login</h3>
<div class="main">
    <EditForm Model="user" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="email" class="sr-only">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="mb-3">
            <label for="password" class="sr-only">Password</label>
            <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
        <div class="checkbox mb-3">
            <label>
                <input type="checkbox" value="remember-me"> Remember me
            </label>
        </div>
        <button type="submit" class="btn btn-lg btn-primary btn-block">Login</button>
    </EditForm>
</div>

<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
