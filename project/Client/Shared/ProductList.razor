@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    @* <div class="alert alert-warning" role="alert">
        @ProductService.Message
    </div> *@

    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item">
            <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
            </li>
                <li class="page-item"><a class="page-link" href="phone/1">1</a></li>
                <li class="page-item"><a class="page-link" href="phone/2">2</a></li>
                <li class="page-item"><a class="page-link" href="phone/3">3</a></li>
                <li class="page-item"><a class="page-link" href="phone/4">4</a></li>
                <li class="page-item"><a class="page-link" href="phone/5">5</a></li>
                <li class="page-item">
                <a class="page-link" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>

    <ul class="row">
        @foreach (var product in ProductService.Products)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                <div class="card my-2 mx-2">
                    <img src="../images/@product.ImageUrl" class="card-img-top rounded mx-auto d-block" style="max-width: 250px; max-height: 250px;" alt="productPng">
                    <div class="card-body">
                        <h5 class="card-title">@product.Title</h5>
                        <h6 class="card-text price">@GetPriceText(product)</h6>
                        <p class="card-text">
                            @(product.Description.Length > 70 ? product.Description.Substring(0, 67) + "..." : product.Description)
                        </p>
                        <a href="/product/@product.Id" class="btn btn-primary">Details</a>
                    </div>
                </div>
            </div>
        }
    </ul>
    for (var i = 1; i <= ProductService.PageCount; i++)
    {
        <a class="btn
                 @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info")
                 page-selection" href="/search/@ProductService.LastSearchText/@i">@i</a>
    }
}

@code {
    private int pageNo { get; set; } = 1;

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
